File-1 (server.c) 
#include<stdio.h> 
#include<stdlib.h> 
#include<unistd.h> 
#include<errno.h> 
#include<string.h> 
#include<sys/types.h> 
#include<sys/stat.h> 
#include<fcntl.h> 
#include<netinet/in.h> 
#include<sys/socket.h> 
#include<arpa/inet.h> 
#include<sys/wait.h> 
#include<signal.h> 
#define MYPORT 6490 
#define BACKLOG 10 
 
int main(void) 
{ 
    int sockfd, fp, new_fd; 
    struct sockaddr_in my_addr, their_addr; 
    int sin_size; 
    int yes = 1; 
    char buf1[40], buf2[20000]; 
    // Create socket 
    if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) == -1) { 
        perror("socket"); 
        exit(1); 
    } 
 
    // Set socket options 
    if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int)) 
== -1) { 
        perror("setsockopt"); 
        exit(1); 
    } 
 
    // Set up the address structure 
    my_addr.sin_family = AF_INET; 
    my_addr.sin_port = htons(MYPORT); 
    my_addr.sin_addr.s_addr = INADDR_ANY; 
    memset(&(my_addr.sin_zero), '\0', 8); 
 
    // Bind the socket to the address 
    if (bind(sockfd, (struct sockaddr *)&my_addr, sizeof(struct sockaddr)) == -1)      
{ 
        perror("bind"); 
        exit(1); 
    } 
 
    // Listen for connections 
    if (listen(sockfd, BACKLOG) == -1) { 
        perror("listen"); 
        exit(1); 
    } 
 
    printf("\nSERVER is online!\nSERVER: Waiting for the client...\n"); 
    sin_size = sizeof(struct sockaddr_in); 
 
    // Accept a connection 
    if ((new_fd = accept(sockfd, (struct sockaddr *)&their_addr, &sin_size)) == 
1) { 
        perror("accept"); 
        exit(1); 
    } 
 
    printf("\nSERVER: Got connection from %s\n", 
inet_ntoa(their_addr.sin_addr)); 
 
    // Receive the file name from the client 
    if (recv(new_fd, buf1, sizeof(buf1) - 1, 0) <= 0) { 
        perror("recv"); 
        close(new_fd); 
        close(sockfd); 
        exit(1); 
    } 
    buf1[sizeof(buf1) - 1] = '\0'; // Ensure null-termination 
    printf("SERVER: File requested: '%s'\n", buf1); 
 
    // Open the file 
    if ((fp = open(buf1, O_RDONLY)) < 0) { 
        printf("File not found\n"); 
        strcpy(buf2, "File not found"); 
    } else { 
        printf("SERVER: '%s' found and ready to transfer.\n", buf1); 
        read(fp, buf2, sizeof(buf2)); 
        close(fp); 
    } 
 
    // Send file contents to the client 
    send(new_fd, buf2, sizeof(buf2), 0); 
    close(new_fd); 
    close(sockfd); 
    printf("Transfer successful\n"); 
    return 0; 
}


File â€“ 2 (client.c) 
#include<stdio.h> 
#include<stdlib.h> 
#include<unistd.h> 
#include<errno.h> 
#include<string.h> 
#include<netdb.h> 
#include<sys/types.h> 
#include<netinet/in.h> 
#include<sys/socket.h> 
#include<fcntl.h> 
 
#define PORT 6490 
 
int main() 
{ 
    int sockfd; 
    char buf1[40], buf2[20000]; 
    struct sockaddr_in their_addr; 
 
    // Create socket 
    if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) == -1) { 
        perror("socket"); 
        exit(1); 
    } 
 
    // Set up the address structure 
    their_addr.sin_family = AF_INET; 
    their_addr.sin_port = htons(PORT); 
    their_addr.sin_addr.s_addr = inet_addr("127.0.0.1"); 
    memset(&(their_addr.sin_zero), '\0', 8); 
 
    // Connect to the server 
    if (connect(sockfd, (struct sockaddr *)&their_addr, sizeof(struct sockaddr)) == -1) { 
        perror("connect"); 
        exit(1); 
    } 
 
    printf("CLIENT is online!\n"); 
    printf("CLIENT: Enter the filename to be displayed: "); 
     
    // Get file name from user input 
    if (fgets(buf1, sizeof(buf1), stdin) == NULL) { 
        perror("fgets"); 
        close(sockfd); 
        exit(1); 
    } 
    buf1[strcspn(buf1, "\n")] = '\0'; // Remove newline character 
    printf("CLIENT: Sending file name '%s'\n", buf1); 
 
    // Send the file name to the server 
    if (send(sockfd, buf1, strlen(buf1) + 1, 0) == -1) { 
        perror("send"); 
        close(sockfd); 
        exit(1); 
    } 
 
    // Receive file content from the server 
    if (recv(sockfd, buf2, sizeof(buf2), 0) == -1) { 
        perror("recv"); 
        close(sockfd); 
        exit(1); 
    } 
 
    // Display the content of the file or error message 
    printf("Displaying the contents of '%s':\n", buf1); 
    printf("\n%s\n", buf2); 
 
    // Close the socket 
    close(sockfd); 
    return 0; 
} 